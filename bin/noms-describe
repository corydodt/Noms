#!/usr/bin/env python
"""
Output the environment variables sourced by build shell scripts
"""
from __future__ import print_function

import re
import json
import os
import sys
from inspect import cleandoc
import pipes

from git import Repo

from codado.tx import Main, CLIError


LOCAL_ENV = 'local.env'


def readEnvironmentFile(fl):
    """
    Read a docker-style environment file

    This file must consist of K=V lines with optional #comment lines.
    """
    ret = {}
    for line in open(fl):
        if re.match('^\s*#', line):
            continue
        k, v = line.strip().split('=', 1)
        ret[k] = v
    return ret


def parseDescribe(s):
    """
    Attempt to extract tag name and data from the describe string
    """
    s = s.strip()
    # some sanity checks on describe string
    if re.match('^(.*/){2}', s):
        s = cleandoc("""
            ** Invalid NOMS_VERSION=%r
            ** You should build from either the HEAD of this branch or a tagged revision
            """ % s)
        raise ValueError(s)

    short = s.split('/', 1)[1] if '/' in s else s
    a, b, c = short.rsplit('-', 2)
    return dict(
            short=short,
            name=a,
            count=b,
            abbrev=c[1:] # strip the "g"
            )


class Describe(Main):
    """
    Describe the build environment of the current directory, using the
    following data:

    1. command-line parameters;
    2. stdin; which is assumed to be coming from `git describe --all --long`
    3. the file local.env;
    4. the process environment variables;
    5. the json data loaded from the git tag, if any such JSON data exists

    This data is prioritized from last to first; so JSON data is used, unless
    it is missing; then environment variables unless they are missing; then
    local.env unless it is missing; then git describe from stdin; then
    command-line parameters or their defaults.
    """
    synopsis = "** Usage: noms-describe"
    optParameters = [
            ['NOMS_DB_HOST', None, 'mongo', ''],
            ['certbot_flags', None, '', ''],
            ['certbot_email', None, 'corydodt@gmail.com', ''],
            ['public_hostname', None, 'dev.nomsbook.com', ''],
            ['proxy_hostname', None, 'noms-main', ''],
            ['proxy_port', None, '8080', ''],
            ]

    def postOptions(self):
        repo = Repo('./')
        try:
            described = repo.git.describe(['--all', '--long'])
            parsed = parseDescribe(described)
        except ValueError, e:
            raise CLIError('noms-describe', 1, e.message)

        # 1. command-line params
        env = {k: ('cli', v) for (k, v) in self.items()}

        # 2. stdin from git describe
        env['NOMS_VERSION'] = ('git describe', parsed['short'])

        # 3. local.env
        if os.path.exists(LOCAL_ENV):
            local = readEnvironmentFile(LOCAL_ENV)
            local = {k: ('local.env', v) for (k, v) in local.items()}
            env.update(local)

        # 4. os.environ
        for k in env:
            v = os.environ.get(k, None)
            if v is not None:
                env[k] = ('process environment', v)

        # 5. structured nomstag
        try:
            mess = os.environ.get('TRAVIS_COMMIT_MESSAGE', '')
            loaded = json.loads(mess)
            if 'nomstag' in loaded:
                loaded = {k: ('nomstag', v) for (k, v) in loaded.items()}
                env.update(loaded)
            else:
                raise ValueError("JSON-like commit body was not a nomstag")
        except ValueError:
            "Not a structured tag"

        last = ''
        for src, k, v in sorted((src, k, v) for (k, (src, v)) in env.items()):
            if last != src:
                last = src
                print('\n# from', src)
            print('%s=%s' % (k, pipes.quote(str(v)) if v else ''))


sys.exit(Describe.main())

# creates the unique singleton resources required by the nomsite stacks
Resources:
    ecsTaskS3Everything:
        Type: "AWS::IAM::Role"
        Properties:
          RoleName: 'ecsTaskS3Everything'
          AssumeRolePolicyDocument:
              Version: 2008-10-17
              Statement:
                 Effect: Allow
                 Principal:
                    Service: ecs-tasks.amazonaws.com
                 Action: 'sts:AssumeRole'

          ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

    ecsInstanceRole:
        Type: "AWS::IAM::Role"
        Properties:
          RoleName: 'ecsInstanceRole'
          AssumeRolePolicyDocument:
              Version: 2008-10-17
              Statement:
                 Effect: Allow
                 Principal:
                    Service: ec2.amazonaws.com
                 Action: 'sts:AssumeRole'

          ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

    ecsInstanceRoleProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
          Roles:
            - !Ref ecsInstanceRole
          InstanceProfileName: ecsInstanceRoleProfile
        DependsOn:
          - ecsInstanceRole

    travisUser:
        Type: "AWS::IAM::User"
        Properties:
            UserName: "travis"

    travisPolicy:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyName: travis-cloudformation
            Users:
                - Ref: travisUser
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                - Effect: Allow
                  Action:
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:CreateStack"
                  - "cloudformation:DescribeChangeSet"
                  Resource:
                  # FIXME: We don't know the ARN of this stack in advance, since
                  # these permissions need to be built BEFORE we build that stack.
                  - "arn:aws:cloudformation:us-west-2:337712362153:stack/nomsite/*"

                - Effect: Allow
                  Action:
                  - "cloudformation:ExecuteChangeSet"
                  - "ecs:DeregisterTaskDefinition"
                  - "ecs:RegisterTaskDefinition"
                  - "ecs:UpdateService"
                  - "ecs:DescribeServices"
                  Resource:
                  - "*"

                - Effect: Allow
                  Action:
                  - "iam:PassRole"
                  Resource:
                  - "arn:aws:iam::337712362153:role/ecsTaskS3Everything"

        DependsOn:
            - ecsTaskS3Everything
            - travisUser

    cluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref AWS::StackName

    clusterInstance:
        Type: AWS::EC2::Instance
        Properties:
            InstanceType: t2.small
            IamInstanceProfile: !Ref ecsInstanceRoleProfile
            SubnetId: !Ref subnetA
            KeyName: cory
            ImageId: ami-596d6520 # amazon ecs-optimized ami (us-west-2)
            UserData:
                "Fn::Base64": !Sub "!/bin/bash -xe\necho ECS_CLUSTER='${cluster}' >> /etc/ecs/ecs.config\necho ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=10m >> /etc/ecs/ecs.config\n"

            Tags:
                - { Key: Name, Value: !Ref ecsInstanceName }

            SecurityGroupIds:
                - sg-0247157a
                - sg-ba2e7cc2
        DependsOn:
            - cluster
            - ecsInstanceRole

    ecsRR:
        Type: AWS::Route53::RecordSet
        Properties:
            HostedZoneName: "nomsbook.com."
            Name: !Sub '${ecsInstanceName}.'
            Type: CNAME
            TTL: 300
            ResourceRecords:
                - !GetAtt clusterInstance.PublicDnsName
        DependsOn:
            - clusterInstance

    mountTargetSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          VpcId: !Ref vpc
          GroupDescription: Security group for mount target
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '2049'
            ToPort: '2049'
            CidrIp: 10.0.0.0/8
          Tags:
          - Key: Name
            Value: efs_sg.proximation.nomsbook.com

    fileSystem:
        Type: AWS::EFS::FileSystem
        Properties:
          FileSystemTags:
          - Key: Name
            Value: efs.proximation.nomsbook.com

    mountTargetA:
        Type: AWS::EFS::MountTarget
        Properties:
          FileSystemId:
              Ref: fileSystem
          SubnetId: !Ref subnetA
          SecurityGroups:
          - Ref: mountTargetSecurityGroup
        DependsOn:
          - mountTargetSecurityGroup

    mountTargetB:
        Type: AWS::EFS::MountTarget
        Properties:
          FileSystemId:
              Ref: fileSystem
          SubnetId: !Ref subnetB
          SecurityGroups:
          - Ref: mountTargetSecurityGroup
        DependsOn:
          - mountTargetSecurityGroup

    mountTargetC:
        Type: AWS::EFS::MountTarget
        Properties:
            FileSystemId:
                Ref: fileSystem
            SubnetId: !Ref subnetC
            SecurityGroups:
            - Ref: mountTargetSecurityGroup
        DependsOn:
          - mountTargetSecurityGroup

Parameters:
  vpc:
    Type: String
    Default: vpc-945930f3
    Description: Enter the name of the VPC

  subnetA:
    Type: String
    Default: subnet-3efc7c59
    Description: Subnet in zone us-west-2a

  subnetB:
    Type: String
    Default: subnet-08659b53
    Description: Subnet in zone us-west-2b

  subnetC:
    Type: String
    Default: subnet-3d885274
    Description: Subnet in zone us-west-2c

  ecsInstanceName:
    Type: String
    Default: ecs.nomsbook.com
    Description: Enter the hostname of the instance in the cluster.


Outputs:
  mountTargetIDA:
    Description: Mount target ID A
    Value:
      Ref: mountTargetA

  mountTargetIDB:
    Description: Mount target ID B
    Value:
      Ref: mountTargetB

  mountTargetIDC:
    Description: Mount target ID C
    Value:
      Ref: mountTargetC

  fileSystemID:
    Description: File system ID
    Value:
      Ref: fileSystem

  securityGroup:
    Description: Security Group for the EFS's
    Value:
      Ref: mountTargetSecurityGroup

  user:
    Description: User object on travis
    Value: !Ref travisUser
    Export:
        Name: !Sub "${AWS::StackName}-user"

  taskRole:
    Description: Role to allow the ECS task to do its work
    Value: !Ref ecsTaskS3Everything
    Export:
        Name: !Sub "${AWS::StackName}-taskRole"

  dns:
    Description: Public DNS name of our cluster's host
    Value: !Ref ecsRR
    Export:
        Name: !Sub "${AWS::StackName}-dns"

  instance:
    Description: EC2 instance that belongs to our cluster
    Value: !Ref clusterInstance
    Export:
        Name: !Sub "${AWS::StackName}-instance"

  cluster:
    Description: ECS cluster
    Value: !Ref cluster
    Export:
        Name: !Sub "${AWS::StackName}-cluster"

AWSTemplateFormatVersion: '2010-09-09'
